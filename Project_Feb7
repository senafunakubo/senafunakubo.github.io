//
//  main.c
//  Project_Nanah
//
//  Created by Sena Funakubo on 2017-02-07.
//  Copyright © 2017 SenaFunakubo. All rights reserved.
//


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>
#define MILLI_SEC 1000000
#define MAX 4

#define CoursesFile "Courses.txt"
#define AccountsFile "Accounts.txt"
#define StudentsFile "Students.txt"
#define StudentsCoursesFile "StudentsCourses.txt"

struct Course{
    char *courseID;
    char *courseName;
};

struct Account{
    char* username;
    char* password;
};

struct Student {

    char* studentID;
    char* name;
    char* gender;
    int grade;
    char* address;
    int admission_year;
    char** courses;
    int numberOfCourses;
};

struct StudentCourse{
    char *studentID;
    char *courseID;
    int mark;
};

//Global Variables
struct Student* listOfStudents;
struct Account* listOfAccounts;
struct Course* listOfCourses;
struct StudentCourse *listOfStudentsCourses;

struct Account currentlyLoggedinAccount;
struct Student currentlyLoggedinStudent;
struct Student listOfAllstudents;
struct timespec  req = {0,200 * MILLI_SEC};

int numberOfAccounts;
int numberOfStudents;
int numberOfStudentsCourses;
int numberOfCourses;

int myRank;
float gpaData;

void loginCheck(void);
void showMenu(void);
void showMenuOptions(void);
void enrolmentCertificate(struct Account account);
void printMyCourses(struct Account account);
float printMyTranscript(struct Account account);
float printMyGPA(struct Account account);
void printMyRanking(struct Account account);
void listAllCourses(void);
void printAllStudents(void);
void resetAccount(void);
int getAllGPA(float mygpa);

char firstChar(char* line);
int strLength(char* line);
char* substring(char* line, int startIndex, int endIndex);
int getTheStartIndex(char* filename, char firstChar);
char** splitString(char* a_str, const char a_delim, int* numberOfComponents);

char** readFile(char* fileAddress, int* numberOfLines);
int numberOfItemsPerRecordInFile(char* fileName);

int convertToNumber(char *);


struct Student createAStudent(char* studentID, char* name, char* gender, int grade, char* address, int admission_year, char* courses[], int numberOfCourses);

struct Student* getListOfStudentFromFile(char* fileAddress, char* fileName, int* numberOfStudents);

struct Account* getListOfAccountsFromFile(char* fileAddress, char* fileName, int* numberOfStudents);
struct Account createAccounts(char* username, char* password);

struct Course* getListOfCoursesFromFile(char* fileAddress, char* fileName, int* numberOfStudents);
struct Course createCourses(char* CourseID, char* CourseName);

struct StudentCourse *getListOfStudentsCoursesFromFile(char* fileAddress, char* fileName, int* numberOfStudentsCourses);
struct StudentCourse createStudentsCourses(char *studentID,char *courseID,int mark);



int main(int argc, const char * argv[]) {
    char* CoursesFileName = CoursesFile;
    char* CoursesFileAddress = "/Users/senafunakubo/Documents/new_project1/new_project1/Courses.txt";
    numberOfCourses = 0;

    listOfCourses = getListOfCoursesFromFile(CoursesFileAddress, CoursesFileName, &numberOfCourses);



    //Extracting students information from the file
    char* studentsFileName = StudentsFile;
    char* studentsfileAddress = "/Users/senafunakubo/Documents/new_project1/new_project1/Students.txt";
    numberOfStudents = 0;

    listOfStudents = getListOfStudentFromFile(studentsfileAddress, studentsFileName, &numberOfStudents);



    char* AccountsFileName = AccountsFile;
    char* AccountsfileAddress = "/Users/senafunakubo/Documents/new_project1/new_project1/Accounts.txt";
    numberOfAccounts = 0;

    listOfAccounts = getListOfAccountsFromFile(AccountsfileAddress, AccountsFileName, &numberOfAccounts);


    char *StudentCoursesFileName = StudentsCoursesFile;
    char *StudentCoursesFileAddress ="/Users/senafunakubo/Documents/new_project1/new_project1/StudentsCourses.txt";
    numberOfStudentsCourses = 0;

    listOfStudentsCourses = getListOfStudentsCoursesFromFile(StudentCoursesFileAddress,StudentCoursesFileName, &numberOfStudentsCourses);

    loginCheck();

    return 0;
}

void loginCheck(void){

    printf("*********************************************************\n");
    printf(" Please enter your account to login:\n");
    printf("*********************************************************\n");
    int a,b;
    char studentId[30], password[30];
    printf("\nUserID:");
    scanf("%s",studentId);
    printf("\nPassword:");
    scanf("%s",password);
    printf("\n\n");

    int found = 0;
    for(int i=0; i<numberOfAccounts;i++){
        a = strcmp(studentId,listOfAccounts[i].username);
        b = strcmp(password,listOfAccounts[i].password);

        if(a==0&&b==0)
        {
            currentlyLoggedinAccount = listOfAccounts[i];
            found = 1;
            break;
        }
    }

    if (found==1) {

        if (nanosleep(&req,NULL) == 0){
            printf("************************************************************\n");
            printf(" Welcome to Cornerstone International College of Canada.\n");
            printf("************************************************************\n");
        }
        showMenuOptions();
    }
    else
    {
        printf("************************************************************\n");
        printf(" Your account does not exist. Please try again!\n");
        printf("************************************************************\n");
        printf("\n\n");
        loginCheck();
    }

}

void enrolmentCertificate(struct Account account){
    int a;
    int found=0;
    for(int i=0; i<numberOfStudents;i++)
    {
        a= strcmp(listOfStudents[i].studentID,account.username);

        if(a==0)
        {
            found =1;
            currentlyLoggedinStudent = listOfStudents[i];
            break;
        }
    }

    if(found==1)
    {

        char* title = NULL;
        if(strcmp(currentlyLoggedinStudent.gender,"female")==0){

            title = "She";

        }else{
            title= "He";
        }

        printf("This is to certify that %s with student id %s is a student at grade %d at CICCC.\n", currentlyLoggedinStudent.name, currentlyLoggedinStudent.studentID,currentlyLoggedinStudent.grade);
        printf("%s was admitted to our college in %d and has taken %d course(s).\n",title,currentlyLoggedinStudent.admission_year,currentlyLoggedinStudent.numberOfCourses);
        printf("Currently %s resides at %s.\n",title,currentlyLoggedinStudent.address);
        printf("If you have any question, please don’t hesitate to contact us.\n");

    }
    else
    {
        printf("Error!");
    }

}//end of the function



void printMyCourses(struct Account account){
    int a;
    int found=0;
    for(int i=0; i<numberOfStudents;i++)
    {
        a= strcmp(listOfStudents[i].studentID,account.username);

        if(a==0)
        {
            found =1;
            currentlyLoggedinStudent = listOfStudents[i];
            break;
        }
    }

    if(found==1)
    {
        printf("Hi %s,\n",currentlyLoggedinStudent.name);
        printf("You have taken the following courses: \n");

        for(int i=0; i<currentlyLoggedinStudent.numberOfCourses;i++){

            if(strcmp(currentlyLoggedinStudent.courses[i],listOfStudentsCourses[i].courseID)==0)
            {
                printf("%d) %s: %s\n",i+1,currentlyLoggedinStudent.courses[i],listOfCourses[i].courseName);
            }

        }//end of the for loop

    }

}// end of the function


float printMyTranscript(struct Account account){
    int a,total;
    int found=0;
    int counter = 1;
    for(int i=0; i<numberOfStudents;i++)
    {
        a= strcmp(listOfStudents[i].studentID,account.username);

        if(a==0)
        {
            found =1;
            currentlyLoggedinStudent = listOfStudents[i];
            break;
        }
    }

    if(found==1)
    {
        printf("Hi %s,\n",currentlyLoggedinStudent.name);
        printf("Here is your transcript: \n");

        for(int i=0; i<numberOfStudentsCourses;i++)
        {
            for(int j=0; j<numberOfCourses; j++)
            {

                if(strcmp(currentlyLoggedinStudent.studentID,listOfStudentsCourses[i].studentID)==0)
                {
                    if(strcmp(listOfStudentsCourses[i].courseID,listOfCourses[j].courseID)==0)
                    {
                        printf("%d) %s: %s: %d\n",counter,listOfStudentsCourses[i].courseID,listOfCourses[j].courseName,listOfStudentsCourses[i].mark);

                        total += listOfStudentsCourses[i].mark;
                        counter++;
                    }
                }

            }//end of the j's for loop

        }//end of the i's for loop

    }
    gpaData = total/(float)currentlyLoggedinStudent.numberOfCourses;
    return gpaData;
}


float printMyGPA(struct Account account){
    int a,total;
    int counter = 1;
    int found=0;
    for(int i=0; i<numberOfStudents;i++)
    {
        a= strcmp(listOfStudents[i].studentID,account.username);

        if(a==0)
        {
            found =1;
            currentlyLoggedinStudent = listOfStudents[i];
            break;
        }
    }

    if(found==1)
    {
        for(int i=0; i<numberOfStudentsCourses;i++)
        {
            for(int j=0; j<numberOfCourses; j++)
            {

                if(strcmp(currentlyLoggedinStudent.studentID,listOfStudentsCourses[i].studentID)==0)
                {
                    if(strcmp(listOfStudentsCourses[i].courseID,listOfCourses[j].courseID)==0)
                    {
                        total += listOfStudentsCourses[i].mark;
                        counter++;
                    }
                }

            }//end of the j's for loop

        }//end of the i's for loop
    }
    gpaData = total/(float)currentlyLoggedinStudent.numberOfCourses;
    return gpaData;
}

int getAllGPA(float mygpa){
    int a = 0;
    float tem = 0;
    float temIndex = 0; // to calculate the number of succeeded strump
    float array[100];

    for(int i=0; i<numberOfStudents;i++)
    {
        for(int k =0; k<numberOfStudentsCourses;k++)
        {
            a= strcmp(listOfStudents[i].studentID, listOfStudentsCourses[k].studentID);

            if(a==0)
            {
                temIndex++;
                tem += listOfStudentsCourses[k].mark;
            }

        }//end of k's for loop

        array[i] = tem / temIndex;

        //We need to initialize it again because we make the pc calculate next person's data.
        tem = 0;
        temIndex = 0;

    }//end of i's for loop

    int myRank = 1;

    for(int j=0; j<numberOfStudents;j++)
    {
        //        printf("\n%f\n", array[j]);

        if(mygpa<array[j])
        {
            myRank++;
        }

    }

    return myRank;
}


void listAllCourses(void){
    printf("The following courses are offered in CICCC: \n\n");
    for(int i=0; i<numberOfCourses;i++){

        printf("%d) %s: %s\n",i+1,listOfCourses[i].courseID,listOfCourses[i].courseName);
    }
}

void printAllStudents(void){
    printf("There are %d students in CICCC as following: \n\n",numberOfStudents);
    for(int i=0; i<numberOfStudents;i++){

        printf("%d) %s: %s\n",i+1,listOfStudents[i].name,listOfStudents[i].studentID);
    }
}


int getTheStartIndex(char* filename, char firstChar)
{

    if(strcmp(filename, AccountsFile)==0 && firstChar=='1')  //1User:”
    {
        return 7;
    }
    else if(strcmp(filename, AccountsFile)==0 && firstChar=='2') //2Pass:”
    {
        return 7;
    }
    if(strcmp(filename, StudentsFile)==0 && firstChar=='1')  //1studentID:”
    {
        return 12;
    }
    else if(strcmp(filename, StudentsFile)==0 && firstChar=='2') //2name:”
    {
        return 7;
    }
    else if(strcmp(filename, StudentsFile)==0 && firstChar=='3') //3gender:”
    {
        return 9;
    }
    else if(strcmp(filename, StudentsFile)==0 && firstChar=='4') //4grade:”
    {
        return 8;
    }
    else if(strcmp(filename, StudentsFile)==0 && firstChar=='5') //5address:“
    {
        return 10;
    }
    else if(strcmp(filename, StudentsFile)==0 && firstChar=='6') //6admission_year:”
    {
        return 17;
    }
    else if(strcmp(filename, StudentsFile)==0 && firstChar=='7') //7courses:”
    {
        return 10;
    }

    else if(strcmp(filename, CoursesFile)==0 && firstChar=='1') //courseID
    {
        return 10;
    }
    else if(strcmp(filename, CoursesFile)==0 && firstChar=='2') //name
    {
        return 6;
    }
    else if(strcmp(filename, StudentsCoursesFile)==0 && firstChar=='1') //1studentID:"
    {
        return 12;
    }
    else if(strcmp(filename, StudentsCoursesFile)==0 && firstChar=='2') //2courseID:"
    {
        return 11;
    }
    else if(strcmp(filename, StudentsCoursesFile)==0 && firstChar=='3') //3mark:"
    {
        return 7;
    }

    else
    {
        return 0;
    }


}

int strLength(char* line)
{

    char c = '\n';
    int index = 0;

    int numberOfDoubleQuotes = 0;

    while(numberOfDoubleQuotes<2)
    {

        c = *(line+index);
        index++;

        if(c == '"')
        {
            numberOfDoubleQuotes++;
        }
    }

    return index;
}

char firstChar(char* line)
{
    return *line;
}


char* substring(char* line, int startIndex, int endIndex)
{
    int len = (endIndex-startIndex)+1;

    char* substring;

    //substring = (char*) malloc((len+1)*sizeof(char));

    substring = (char*) malloc((len+1)*sizeof(char));

    for(int i=0; i<=len; i++)
    {
        substring[i] = '\0';
    }

    for(int i=0; i<len; i++)
    {
        substring[i] = *(line+startIndex+i);

        substring[i] = line[startIndex+i];
        //*(substring+i) = *(line+startIndex+i);
    }

    substring[len+1] = '\0';
    return substring;

}


char** splitString(char* a_str, const char a_delim, int* numberOfComponents)
{
    char** result    = 0;
    size_t count     = 0;
    char* tmp        = a_str;
    char* last_comma = 0;
    char delim[2];
    delim[0] = a_delim;
    delim[1] = 0;



    /* Count how many elements will be extracted. */
    while (*tmp)
    {
        if (a_delim == *tmp)
        {
            count++;
            last_comma = tmp;
        }
        tmp++;
    }



    /* Add space for trailing token. */
    count += last_comma < (a_str + strlen(a_str) - 1);

    *numberOfComponents = (int)count;

    /* Add space for terminating null string so caller
     knows where the list of returned strings ends. */
    count++;

    result = malloc(sizeof(char*) * count);



    char* components[count];
    for(int i=0; i<count; i++)
    {
        components[i] = '\0';
    }

    int counter = 0;
    if (result)
    {
        size_t idx  = 0;
        char* token = strtok(a_str, delim);

        while (token)
        {
            *(result + idx++) = strdup(token);
            token = strtok(0, delim);

            counter++;

            components[counter] = token;
        }
        *(result + idx) = 0;
    }

    return result;
}


char** readFile(char* fileAddress, int* numberOfLines)

{
    int lines_allocated = 128;
    int max_line_len = 100;

    /* Allocate lines of text */
    char **words = (char **)malloc(sizeof(char*)*lines_allocated);
    if (words==NULL)
    {
        fprintf(stderr,"Out of memory (1).\n");
        exit(1);
    }

    FILE *fp = fopen(fileAddress, "r");
    if (fp == NULL)
    {
        fprintf(stderr,"Error opening file.\n");
        exit(2);
    }

    int i;
    for (i=0;1;i++)
    {
        int j;

        /* Have we gone over our line allocation? */
        if (i >= lines_allocated)
        {
            int new_size;

            /* Double our allocation and re-allocate */
            new_size = lines_allocated*2;
            words = (char **)realloc(words,sizeof(char*)*new_size);
            if (words==NULL)
            {
                fprintf(stderr,"Out of memory.\n");
                exit(3);
            }
            lines_allocated = new_size;
        }
        /* Allocate space for the next line */
        words[i] = malloc(max_line_len);
        if (words[i]==NULL)
        {
            fprintf(stderr,"Out of memory (3).\n");
            exit(4);
        }
        if (fgets(words[i],max_line_len-1,fp)==NULL)
            break;

        /* Get rid of CR or LF at end of line */
        for (j=(int)(strlen(words[i]))-1;j>=0 && (words[i][j]=='\n' || words[i][j]=='\r');j--)
            ;
        words[i][j+1]='\0';
    }
    /* Close file */
    fclose(fp);


    (*numberOfLines) = i;


    return words;
}


int numberOfItemsPerRecordInFile(char* fileName)
{
    if(strcmp(fileName, CoursesFile)==0)
    {
        return 2;
    }
    else if(strcmp(fileName, AccountsFile)==0)
    {
        return 2;
    }
    else if(strcmp(fileName, StudentsFile)==0)
    {
        return 7;
    }
    else if(strcmp(fileName, StudentsCoursesFile)==0)
    {
        return 3;
    }
    else
    {
        return 1;
    }
}

struct Student createAStudent(char* studentID, char* name, char* gender, int grade, char* address, int admission_year, char* courses[], int numberOfCourses)
{
    struct Student* student = (struct Student*)malloc(sizeof(struct Student));

    (*student).studentID = studentID;
    (*student).name = name;
    (*student).gender = gender;
    (*student).grade = grade;
    (*student).address = address;
    (*student).admission_year = admission_year;
    (*student).courses = courses;
    (*student).numberOfCourses = numberOfCourses;


    return *student;
}

struct Account createAccounts(char* username, char* password)
{
    struct Account* account = (struct Account*)malloc(sizeof(struct Account));

    (*account).username = username;
    (*account).password = password;


    return *account;
}

struct Course createCourses(char* courseID, char* courseName)
{
    struct Course* course = (struct Course*)malloc(sizeof(struct Course));

    (*course).courseID = courseID;
    (*course).courseName = courseName;


    return *course;
}

struct StudentCourse createStudentsCourses(char *studentID,char *courseID,int mark)
{
    struct StudentCourse *studentCourse = (struct StudentCourse*)malloc(sizeof(struct StudentCourse));
    (*studentCourse).studentID = studentID;
    (*studentCourse).courseID = courseID;
    (*studentCourse).mark = mark;

    return *studentCourse;
}

struct Student* getListOfStudentFromFile(char* fileAddress, char* fileName, int* numberOfStudents)
{



    int numberOfStudentsReadFromFileSoFar = 0;

    int numberOfLinesInTheFile = 0;
    char** lines = readFile(fileAddress, &numberOfLinesInTheFile);

    int numberOfLinesPerRecord = numberOfItemsPerRecordInFile(fileName);

    int numberOfRecords = numberOfLinesInTheFile / numberOfLinesPerRecord;


    struct Student* listOfStudents = (struct Student*) malloc(numberOfRecords*sizeof(struct Student));


    for(int k=0; k<numberOfRecords; k++)
    {
        char* studentID = NULL;
        char* name = NULL;
        char* gender = NULL;
        int grade = 0;
        char* address = NULL;
        int admission_year = 0;
        char** courses= NULL;

        int numberOfCourses = 0;


        for(int i=0; i<numberOfLinesPerRecord; i++)
        {
            int indexOfLine = k*numberOfLinesPerRecord+i;

            if(lines[indexOfLine]!=NULL)
            {
                //printf("\n%s\n", lines[indexOfLine]);
                char firstCharacter = firstChar(lines[indexOfLine]);

                int lineLength = strLength(lines[indexOfLine]);

                int startIndex = getTheStartIndex(fileName, firstChar(lines[indexOfLine]));


                if(firstCharacter=='1')
                {
                    studentID = substring(lines[indexOfLine], startIndex, lineLength-2);
                }
                else if(firstCharacter=='2')
                {
                    name = substring(lines[indexOfLine], startIndex, lineLength-2);
                }
                else if(firstCharacter=='3')
                {
                    gender = substring(lines[indexOfLine], startIndex, lineLength-2);
                }
                else if(firstCharacter=='4')
                {
                    char* gradeStr = substring(lines[indexOfLine], startIndex, lineLength-2);

                    grade = convertToNumber(gradeStr);
                }
                else if(firstCharacter=='5')
                {
                    address = substring(lines[indexOfLine], startIndex, lineLength-2);
                }
                else if(firstCharacter=='6')
                {
                    char* admissionYearStr = substring(lines[indexOfLine], startIndex, lineLength-2);
                    admission_year = convertToNumber(admissionYearStr);
                }
                else if(firstCharacter=='7')
                {
                    int numberOfComponents = 0;
                    char* coursesStr = substring(lines[indexOfLine], startIndex, lineLength-2);
                    courses = splitString(coursesStr, ',', &numberOfComponents);



                    numberOfCourses = numberOfComponents;

                }
            }//end of if


        }//end of second for


        struct Student student= createAStudent(studentID, name, gender, grade, address, admission_year, courses, numberOfCourses);
        listOfStudents[numberOfStudentsReadFromFileSoFar] = student;

        numberOfStudentsReadFromFileSoFar++;


    }//end of first for

    *numberOfStudents = numberOfStudentsReadFromFileSoFar;
    return listOfStudents;
}

struct Account* getListOfAccountsFromFile(char* fileAddress, char* fileName, int* numberOfStudents)
{



    int numberOfAccountsReadFromFileSoFar = 0;

    int numberOfLinesInTheFile = 0;
    char** lines = readFile(fileAddress, &numberOfLinesInTheFile);

    int numberOfLinesPerRecord = numberOfItemsPerRecordInFile(fileName);

    int numberOfRecords = numberOfLinesInTheFile / numberOfLinesPerRecord;


    struct Account* listOfAccounts = (struct Account*) malloc(numberOfRecords*sizeof(struct Account));


    for(int k=0; k<numberOfRecords; k++)
    {
        char* username = NULL;
        char* password = NULL;



        for(int i=0; i<numberOfLinesPerRecord; i++)
        {
            int indexOfLine = k*numberOfLinesPerRecord+i;

            if(lines[indexOfLine]!=NULL)
            {
                //printf("\n%s\n", lines[indexOfLine]);
                char firstCharacter = firstChar(lines[indexOfLine]);

                int lineLength = strLength(lines[indexOfLine]);

                int startIndex = getTheStartIndex(fileName, firstChar(lines[indexOfLine]));


                if(firstCharacter=='1')
                {
                    username = substring(lines[indexOfLine], startIndex, lineLength-2);
                }
                else if(firstCharacter=='2')
                {
                    password = substring(lines[indexOfLine], startIndex, lineLength-2);
                }
            }//end of if


        }//end of second for


        struct Account account= createAccounts(username, password);
        listOfAccounts[numberOfAccountsReadFromFileSoFar] = account;

        numberOfAccountsReadFromFileSoFar++;


    }//end of first for

    *numberOfStudents = numberOfAccountsReadFromFileSoFar;
    return listOfAccounts;
}

struct Course* getListOfCoursesFromFile(char* fileAddress, char* fileName, int* numberOfCourses)
{



    int numberOfCoursesReadFromFileSoFar = 0;

    int numberOfLinesInTheFile = 0;
    char** lines = readFile(fileAddress, &numberOfLinesInTheFile);

    int numberOfLinesPerRecord = numberOfItemsPerRecordInFile(fileName);

    int numberOfRecords = numberOfLinesInTheFile / numberOfLinesPerRecord;


    struct Course* listOfCourses = (struct Course*) malloc(numberOfRecords*sizeof(struct Course));


    for(int k=0; k<numberOfRecords; k++)
    {
        char* CourseID = NULL;
        char* CourseName = NULL;



        for(int i=0; i<numberOfLinesPerRecord; i++)
        {
            int indexOfLine = k*numberOfLinesPerRecord+i;

            if(lines[indexOfLine]!=NULL)
            {
                //printf("\n%s\n", lines[indexOfLine]);
                char firstCharacter = firstChar(lines[indexOfLine]);

                int lineLength = strLength(lines[indexOfLine]);

                int startIndex = getTheStartIndex(fileName, firstChar(lines[indexOfLine]));


                if(firstCharacter=='1')
                {
                    CourseID = substring(lines[indexOfLine], startIndex+1, lineLength-2);
                }
                else if(firstCharacter=='2')
                {
                    CourseName = substring(lines[indexOfLine], startIndex+1, lineLength-2);
                }

            }//end of if


        }//end of second for


        struct Course course= createCourses(CourseID, CourseName);
        listOfCourses[numberOfCoursesReadFromFileSoFar] = course;

        numberOfCoursesReadFromFileSoFar++;


    }//end of first for

    *numberOfCourses = numberOfCoursesReadFromFileSoFar;
    return listOfCourses;
}

struct StudentCourse* getListOfStudentsCoursesFromFile(char* fileAddress, char* fileName, int* numberOfStudentsCourses)
{

    int numberOfStudentsCoursesReadFromFileSoFar = 0;

    int numberOfLinesInTheFile = 0;
    char** lines = readFile(fileAddress, &numberOfLinesInTheFile);

    int numberOfLinesPerRecord = numberOfItemsPerRecordInFile(fileName);

    int numberOfRecords = numberOfLinesInTheFile / numberOfLinesPerRecord;


    struct StudentCourse* listOfStudentsCourses = (struct StudentCourse*) malloc(numberOfRecords*sizeof(struct StudentCourse));


    for(int k=0; k<numberOfRecords; k++)
    {
        char *studentID = NULL;
        char *courseID = NULL;
        int mark = 0;

        for(int i=0; i<numberOfLinesPerRecord; i++)
        {
            int indexOfLine = k*numberOfLinesPerRecord+i;

            if(lines[indexOfLine]!=NULL)
            {
                //printf("\n%s\n", lines[indexOfLine]);
                char firstCharacter = firstChar(lines[indexOfLine]);

                int lineLength = strLength(lines[indexOfLine]);

                int startIndex = getTheStartIndex(fileName, firstChar(lines[indexOfLine]));


                if(firstCharacter=='1')
                {
                    studentID = substring(lines[indexOfLine], startIndex, lineLength-2);
                }
                else if(firstCharacter=='2')
                {
                    courseID = substring(lines[indexOfLine], startIndex, lineLength-2);
                }
                else if(firstCharacter=='3')
                {
                    char* markStr = substring(lines[indexOfLine], startIndex, lineLength-2);
                    mark = convertToNumber(markStr);
                }
            }//end of if


        }//end of second for


        struct StudentCourse StudentsCourses= createStudentsCourses(studentID,courseID,mark);
        listOfStudentsCourses[numberOfStudentsCoursesReadFromFileSoFar] = StudentsCourses;

        numberOfStudentsCoursesReadFromFileSoFar++;


    }//end of first for

    *numberOfStudentsCourses = numberOfStudentsCoursesReadFromFileSoFar;
    return listOfStudentsCourses;
}



int convertToNumber(char * string)
{
    int number = atoi( string );
    return number;
}

void showMenu(void)
{
    int input;
    printf("Enter the number corresponding to each item to proceed: ");
    scanf("%d", &input);

    switch(input){

        case 1:
            enrolmentCertificate(currentlyLoggedinAccount);  //current~Accountのデータをここで送っている
            showMenuOptions();
            break;

        case 2:
            printMyCourses(currentlyLoggedinAccount);
            showMenuOptions();
            break;

        case 3:
            gpaData = printMyTranscript(currentlyLoggedinAccount);
            printf("YOUR GPA IS: ");
            printf("%f",gpaData);
            showMenuOptions();
            break;

        case 4:

            gpaData = printMyGPA(currentlyLoggedinAccount);
            printf("Hi %s,\n",currentlyLoggedinStudent.name);
            printf("YOUR GPA IS: ");
            printf("%f",gpaData);
            showMenuOptions();
            break;

        case 5:
            gpaData = printMyGPA(currentlyLoggedinAccount);
            printf("Hi %s,\n",currentlyLoggedinStudent.name);
            printf("YOUR GPA IS: ");
            printf("%f",gpaData);

            myRank = getAllGPA(gpaData);
            printf(" and therefore your rank is %d\n",myRank);
            showMenuOptions();
            break;

        case 6:
            listAllCourses();
            showMenuOptions();
            break;

        case 7:
            printAllStudents();
            showMenuOptions();
            break;

        case 8:
            printf("You selected Logout.\n\n");
            resetAccount();
            if (nanosleep(&req,NULL) == 0)
            {
                loginCheck();
            }
            break;

        case 9:
            printf("See you!\n");
            exit(1);
            break;

        default:
            printf("You entered a wrong number! Please try again.\n");
            showMenu();

    }//end of switch
    printf("\n*********************************************\n");
}

void resetAccount(void){
    currentlyLoggedinAccount.username = 0;
    currentlyLoggedinAccount.password = 0;
}

void showMenuOptions(void)
{
    printf("\n*********************************************************\n");
    printf(" Select from the options:");
    printf("\n*********************************************************\n");

    printf("[1] Print my enrolment certificate\n");
    printf("[2] Print my courses\n");
    printf("[3] Print my transcript\n");
    printf("[4] Print my GPA\n");
    printf("[5] Print my ranking among all students in the college\n");
    printf("[6] List all available courses\n");
    printf("[7] List all students\n");
    printf("[8] Logout\n");
    printf("[9] Exit\n");

    printf("\n==============================\n");
    showMenu();

}
